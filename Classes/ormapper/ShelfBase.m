// Generated by O/R mapper generator ver 1.0

#import "Database.h"
#import "ShelfBase.h"

@implementation ShelfBase

@synthesize name = mName;
@synthesize sorder = mSorder;
@synthesize shelfType = mShelfType;
@synthesize titleFilter = mTitleFilter;
@synthesize authorFilter = mAuthorFilter;
@synthesize manufacturerFilter = mManufacturerFilter;
@synthesize tagsFilter = mTagsFilter;
@synthesize starFilter = mStarFilter;

- (id)init
{
    self = [super init];
    return self;
}

- (void)dealloc
{
    [mName release];
    [mTitleFilter release];
    [mAuthorFilter release];
    [mManufacturerFilter release];
    [mTagsFilter release];
    [super dealloc];
}

/**
  @brief Migrate database table

  @return YES - table was newly created, NO - table already exists
*/

+ (BOOL)migrate
{
    NSArray *columnTypes = [NSArray arrayWithObjects:
        @"name", @"TEXT",
        @"sorder", @"INTEGER",
        @"type", @"INTEGER",
        @"titleFilter", @"TEXT",
        @"authorFilter", @"TEXT",
        @"manufacturerFilter", @"TEXT",
        @"tagsFilter", @"TEXT",
        @"starFilter", @"INTEGER",
        nil];

    return [super migrate:columnTypes primaryKey:@"pkey"];
}

/**
  @brief allocate entry
*/
+ (id)allocator
{
    id e = [[[ShelfBase alloc] init] autorelease];
    return e;
}

#pragma mark Read operations

/**
  @brief get the record matchs the id

  @param pid Primary key of the record
  @return record
*/
+ (ShelfBase *)find:(int)pid
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"SELECT * FROM Shelf WHERE pkey = ?;"];
    [stmt bindInt:0 val:mPid];
    if ([stmt step] != SQLITE_ROW) {
        return nil;
    }

    ShelfBase *e = [self allocator];
    [e _loadRow:stmt];
 
    return e;
}

/**
  @brief get all records matche the conditions

  @param cond Conditions (WHERE phrase and so on)
  @return array of records
*/
+ (NSMutableArray *)find_cond:(NSString *)cond
{
    dbstmt *stmt = [self gen_stmt:cond];
    NSMutableArray *array = [self find_stmt:stmt];
    return array;
}

/**
  @brief create dbstmt

  @param s condition
  @return dbstmt
*/
+ (dbstmt *)gen_stmt:(NSString *)cond
{
    NSString *sql;
    if (cond == nil) {
        sql = @"SELECT * FROM Shelf;";
    } else {
        sql = [NSString stringWithFormat:@"SELECT * FROM Shelf %@;", cond];
    }  
    dbstmt *stmt = [[Database instance] prepare:sql];
    return stmt;
}

/**
  @brief get all records matche the conditions

  @param stmt Statement
  @return array of records
*/
+ (NSMutableArray *)find_stmt:(dbstmt *)stmt
{
    NSMutableArray *array = [[[NSMutableArray alloc] init] autorelease];

    while ([stmt step] == SQLITE_ROW) {
        ShelfBase *e = [self allocator];
        [e _loadRow:stmt];
        [array addObject:e];
    }
    return array;
}

- (void)_loadRow:(dbstmt *)stmt
{
    self.pid = [stmt colInt:0];
    self.name = [stmt colString:1];
    self.sorder = [stmt colInt:2];
    self.shelfType = [stmt colInt:3];
    self.titleFilter = [stmt colString:4];
    self.authorFilter = [stmt colString:5];
    self.manufacturerFilter = [stmt colString:6];
    self.tagsFilter = [stmt colString:7];
    self.starFilter = [stmt colInt:8];

    mIsNew = NO;
}

#pragma mark Create operations

- (void)_insert
{
    [super _insert];

    Database *db = [Database instance];
    dbstmt *stmt;
    
    //[db beginTransaction];
    stmt = [db prepare:@"INSERT INTO Shelf VALUES(NULL,?,?,?,?,?,?,?,?);"];

    [stmt bindString:0 val:mName];
    [stmt bindInt:1 val:mSorder];
    [stmt bindInt:2 val:mShelfType];
    [stmt bindString:3 val:mTitleFilter];
    [stmt bindString:4 val:mAuthorFilter];
    [stmt bindString:5 val:mManufacturerFilter];
    [stmt bindString:6 val:mTagsFilter];
    [stmt bindInt:7 val:mStarFilter];
    [stmt step];

    self.pid = [db lastInsertRowId];

    //[db commitTransaction];
    mIsNew = NO;
}

#pragma mark Update operations

- (void)_update
{
    [super _update];

    Database *db = [Database instance];
    //[db beginTransaction];

    dbstmt *stmt = [db prepare:@"UPDATE Shelf SET "
        "name = ?"
        ",sorder = ?"
        ",type = ?"
        ",titleFilter = ?"
        ",authorFilter = ?"
        ",manufacturerFilter = ?"
        ",tagsFilter = ?"
        ",starFilter = ?"
        " WHERE pkey = ?;"];
    [stmt bindString:0 val:mName];
    [stmt bindInt:1 val:mSorder];
    [stmt bindInt:2 val:mShelfType];
    [stmt bindString:3 val:mTitleFilter];
    [stmt bindString:4 val:mAuthorFilter];
    [stmt bindString:5 val:mManufacturerFilter];
    [stmt bindString:6 val:mTagsFilter];
    [stmt bindInt:7 val:mStarFilter];
    [stmt bindInt:8 val:mPid];

    [stmt step];
    //[db commitTransaction];
}

#pragma mark Delete operations

/**
  @brief Delete record
*/
- (void)delete
{
    Database *db = [Database instance];

    dbstmt *stmt = [db prepare:@"DELETE FROM Shelf WHERE pkey = ?;"];
    [stmt bindInt:0 val:mPid];
    [stmt step];
}

/**
  @brief Delete all records
*/
+ (void)delete_cond:(NSString *)cond
{
    Database *db = [Database instance];

    if (cond == nil) {
        cond = @"";
    }
    NSString *sql = [NSString stringWithFormat:@"DELETE FROM Shelf %@;", cond];
    [db exec:sql];
}

+ (void)delete_all
{
    [ShelfBase delete_cond:nil];
}

#pragma mark Internal functions

+ (NSString *)tableName
{
    return @"Shelf";
}

@end
